
@{ ViewData["Title"] = "Backlog";
                Layout = "~/Views/Shared/_LayoutDashboard.cshtml";
                var result = ViewData["ProjectId"] as int?;
                var BoardId = ViewData["BoardId"] as int?;
                var CurrentIteration = ViewData["Iteration"] as int?;
                var Phase = ViewData["Phase"] as string; }
<link rel="stylesheet"
      href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/styles/default.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/highlight.min.js"></script>
<link href="~/css/Shared/quill/quillsnow.css" rel="stylesheet">

<!-- Main Quill library -->
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>

<style>
    #main-text {
        height: 90vh;
    }

    .fa-bug:before {
        font-family: "e-icons" !important;
        content: '\e191';
        color: #1f818c;
        width: 30px;
        height: 30px;
    }

    .fa-cog:before {
        font-family: "e-icons" !important;
        content: '\e679';
        color: #1f818c;
        width: 30px;
        height: 30px;
    }

    .fa-tasks:before {
        font-family: "e-icons" !important;
        content: '\e728';
        color: #1f818c;
        width: 30px;
        height: 30px;
    }

    .fa-vial:before {
        font-family: "e-icons" !important;
        content: '\e664';
        color: #1f818c;
        width: 30px;
        height: 30px;
    }

    .fa-crown:before {
        font-family: "e-icons" !important;
        content: '\e824';
        color: #1f818c;
        width: 30px;
        height: 30px;
    }

    .fa-exclamation-triangle:before {
        font-family: "e-icons" !important;
        content: '\e74c';
        color: #1f818c;
        width: 30px;
        height: 30px;
    }

    .fa-user-circle:before {
        font-family: "e-icons" !important;
        content: '\e193';
        color: #1f818c;
        width: 30px;
        height: 30px;
    }
</style>


<!-- end of sidebar element -->
<!-- main-content declaration -->

<div id="spinner">
    <div id="loader"></div>
</div>
<div id="Content" hidden>
    <div class="row" style="margin:0px;">
        <div class="col-md-12">
            <div class="main-card mb-3 card">
                <div class="card-body">
                    <h5 class="card-title text-center">Select a project</h5>
                    <div class="row" style="margin-left:10px;">

                        <div class="btn-group dropdown-split-primary">
                            <button type="button" id="iconbtn" class="btn btn-primary">New Work Item</button>




                            <button id="QueryBtn">Open In Query</button>
                            <button id="ImportWorkItemBtn" onclick="ImportNewWorkItems()"></i>Import Work Items</button>
                            <button id="ExportWorkItemBtn">Export Work Items</button>
                            <button Id="RecycleBtn" onclick="DeleteWorkItems()">Recycle Work Items</button>
                            @await Component.InvokeAsync("IterationDropdown", new IncomingIdRequest
                            {
                                ProjectId = @result.Value,
                                Id = @CurrentIteration.Value,
                                Phase = "Backlogs/Index"
                            })



                        </div>
                        <div class="control-section" style="height:97vh;">
                            <div class="content-wrapper">
                                <div id="TreeGrid"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="exportDialog">
        <div class="row">
            <button id="importWorkItemsBtn" style="width: 100%;" onclick="ImportItems()">Import Items</button>
        </div>
        <div class="row" style="padding:2%;">
            <div class="position-relative form-group" style="width:100%;height:300px;"><label for="exportContent" class="">Manual Creation Script</label><div name="exportContent" id="exportContent" style="max-height: 400px;" class="form-control"></div></div>
        </div>

    </div>

    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
    <script src="~/Syncfusion/ej2/dist/ej2.min.js"></script>
    <script type="text/x-jsrender" id="empTemplate">
        <div>
            <div class="empimg">
                <span class="e-userimg">
                </span>
            </div>
            <span id="Emptext">${Employees}</span>
        </div>
    </script>

    <script>
    ej.treegrid.TreeGrid.Inject(ej.treegrid.Edit, ej.treegrid.CommandColumn);

    var exportDialog;
    var exportContent;

    var selectedRows = [];
    var ProjectId = @result;
    var  boardId = @BoardId;
    function OpenWorkItem(id)
    {

    }
    $( document ).ready(function()
    {
         exportContent = new Quill('#exportContent', {
            theme: 'snow',
            height: '300px'
        });
        var id = @result;

        var dto = {
            "id": id,
            "WorkItemType":0,
            "Phase" : "@Phase",
            "ProjectId" : @CurrentIteration
        }

        $.ajax({
            type: 'POST',
            url: '/Backlogs/GetWorkItems',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                InitiliazeGrid(response);
            },
            error: function (xhr, status, error) {

            }
        });
        exportDialog = new ej.popups.Dialog({
            width: '600px',
            header: 'Project Backup',
            isModal: true,
            animationSettings: { effect: 'None' },
            visible: false,
            open: ExportDialogOpen,
            close: ExportDialogClose
        });
        exportDialog.appendTo('#exportDialog');
        exportDialog.hide();

    });
    function ExportDialogOpen()
    {
        document.getElementById('exportDialog').style.display = 'block';
    }
    function ExportDialogClose()
    {
        document.getElementById('exportDialog').style.display = 'none';

    }
    ej.base.enableRipple(true);
    var queryBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    queryBtn.appendTo('#QueryBtn');
    var importWorkItemBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    importWorkItemBtn.appendTo('#ImportWorkItemBtn');
    var exportWorkItemBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    exportWorkItemBtn.appendTo('#ExportWorkItemBtn');
    var recycleBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    recycleBtn.appendTo('#RecycleBtn');

    // DropDownButton items declaration
    var items = [
        {
            text: 'Epic',
            iconCss: 'e-icons e-epic',

            url:"/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+5+"&boardId="+boardId+"&parentId=0&returnUrl="+window.location.href
        },
        {
            text: 'Feature',
            iconCss: 'e-icons e-Feature',

            url:"/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+2+"&boardId="+boardId+"&parentId=0&returnUrl="+window.location.href
        },
        {
            text: 'User Story',
            iconCss: 'e-icons e-Story',
             url:"/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+7+"&boardId="+boardId+"&parentId=0&returnUrl="+window.location.href

        },
        {
            text: 'Task',
            iconCss: 'e-icons e-Task',
            url:"/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+3+"&boardId="+boardId+"&parentId=0&returnUrl="+window.location.href

        },
        {
            text: 'Bug',
            iconCss: 'e-icons e-Bug',
            url:"/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+1+"&boardId="+boardId+"&parentId=0&returnUrl="+window.location.href
        },
        {
            text: 'Issue',
            iconCss: 'e-icons e-Issue',
            url:"/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+6+"&boardId="+boardId+"&parentId=0&returnUrl="+window.location.href

        },
        {
            text: 'Test',
            iconCss: 'e-icons e-Test',
            url:"/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+4+"&boardId="+boardId+"&parentId=0&returnUrl="+window.location.href
         }

        ];

    var btnObj = new ej.splitbuttons.DropDownButton({ items: items, iconCss: 'e-ddb-icons e-profile',cssClass: 'e-outline', select:WorkItemListClicked });
    btnObj.appendTo('#iconbtn');

    function WorkItemListClicked(args)
    {
        var url = args.properties.url;
        window.location.href = url;
    }

    function InitiliazeGrid(data )
    {



        var treeGridObj = new ej.treegrid.TreeGrid({
            dataSource: data,
            allowSelection: true,
            allowFiltering: true,
            allowSorting: true,
            toolbar: ['Search'],
            recordDoubleClick: EditWorkItem,
            rowSelected: RowSelected,
            rowDeselected: RowDeselected,
           // enableVirtualization: true,
            filterSettings: { type: 'Menu' },
            queryCellInfo: customiseCell,
            selectionSettings: { persistSelection: true, type: "Multiple" },
            childMapping: 'subtasks',
            enableHover: false,
            allowPaging: true,
            pageSettings: { pageCount: 16, pageSize:16 },

            height: '650px',
            columns: [
                { type: "checkbox", field: "checkbox", allowFiltering: false, allowSorting: false, width: '20' , textAlign: 'center'},
                { field: 'workItemType.TypeName', headerText: 'Type', width: '10',customAttributes: {class: "workItemIcon"}, textAlign: 'center',allowFiltering: false },
                { field: 'title', headerText: 'Title', width: 125 },
                { field: 'description', headerText: 'Description', width: 180 },
                { field: 'assignedTo', headerText: 'AssignedTo', width: 110 },
            ],
            //pageSettings: { pageSize: 10, pageCount: 2, pageSizes: true }
        });

        treeGridObj.appendTo('#TreeGrid');
        ShowContent();


    }

    function customiseCell(args) {
        if (args.column.headerText === 'Type' ){
            args.cell.setAttribute('class', args.data.workItemIcon);
        }

        if (args.column.field === 'checkbox') {
            args.cell.setAttribute('style', "text-align:center; padding:0; margin:0;");

        }
    }

    function CreateNewWorkItem(id){
        ProjectId = @result;
        boardId = @BoardId;
        window.location.href = "/Dashboard/AddNewWorkItem?projectId="+ProjectId+"&workItemType="+id+"&boardId="+boardId+"&returnUrl="+window.location.href;
    }
    function WorkItemSelected(args){
    }

    function EditWorkItem(args)
    {
        window.location.href = "/Dashboard/EditWorkItem?projectId=@result&&workItem="+args.rowData.id+"&returnUrl="+window.location.href;
    }
    function load(args) {
        this.parentDetails.parentKeyFieldValue = this.parentDetails.parentRowData['id'];
    }
    function RowSelected(args)
    {
        selectedRows.push(args.data);
    }

    function RowDeselected(args)
    {
        var index = selectedRows.indexOf(args.data[0]);
        if (index > -1) {
            selectedRows.splice(index, 1);
        }

    }
    function DeleteWorkItems()
    {
        var incomingSprintDTO =
        {
            "Items":  selectedRows
        }



        $.ajax({
            type: 'POST',
            url: '/Backlogs/ItemsRemoved',
            data: JSON.stringify(incomingSprintDTO),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(response) {
               window.location.href = window.location;
            },
            error: function(xhr, status, error) {
            }
        });
    }

    function ImportNewWorkItems()
    {
        exportDialog.show();
    }

    function ImportItems()
    {
        var incomingSprintDTO =
        {
            "Data":  $("#exportContent").children()[0].innerHTML
        }

        $.ajax({
            type: 'POST',
            url: '/Boards/ImportWorkItems',
            data: JSON.stringify(incomingSprintDTO),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function(response) {
        //       window.location.href = window.location;
            },
            error: function(xhr, status, error) {
            }
        });
    }
    </script>


