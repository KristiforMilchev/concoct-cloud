@{ var ProjectId = ViewData["ProjectId"] as int?; }

<link rel="stylesheet"
      href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/styles/default.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/highlight.min.js"></script>
<link href="~/css/Shared/quill/quillsnow.css" rel="stylesheet">
<!-- Main Quill library -->
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<div class="col-lg-12 control-section">
    <div class="row">
        <div class="content-wrapper">
            <div id="chatGrid"></div>
        </div>
    </div>
    <div class="row">
        <div class="content-wrapper">
            <input id="sName" />
        </div>
    </div>
    <div class="row">
        <div class="content-wrapper">
            <div class="position-relative form-group" style="width:100%;">
                <div name="ChatMessageBar" id="ChatMessageBar" class="form-control"></div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="content-wrapper">
            <button onclick="SendMessageOutboundFeeedbackPublic()" id="SendMsgBtn" style="width:100%;"> <i class="fas fa-save"></i> Send</button>
        </div>
    </div>
</div>

<script>
    var chatGrid;
    var messagesDto = {
        "Id": @ProjectId
    }
    var ChatMessageBar;
    var sName = new ej.inputs.TextBox({
        placeholder: 'First Name',
        floatLabelType: 'Auto'
    });
    sName.appendTo('#sName');
    var SendMsgBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    SendMsgBtn.appendTo('#SendMsgBtn');
    ChatMessageBar = new Quill('#ChatMessageBar', {
        theme: 'snow'
    });
    $.ajax({
            type: 'POST',
            url: '/OutboundDetails/GetPublicDiscussions',
            data: JSON.stringify(messagesDto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",

            success: function (response) {
                InitalizeChatDiscussion(response);
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
    });
    function InitalizeChatDiscussion(data)
    {
        chatGrid = new ej.grids.Grid({
            dataSource: data,
            height: 335,
            editSettings: {allowAdding: true, mode: 'Normal', newRowPosition: 'Bottom' },
            actionBegin: ChatActionBegin,
            allowPaging: false,
            width: 'auto',
            columns: [
                { headerText: 'Name', field: "senderName", width: 150, textAlign: 'Center' },
                { headerText: 'Message', width: 300, field: 'messageContent', textAlign: 'Left' }
            ]
        });
        chatGrid.appendTo('#chatGrid');
    }

    function ChatActionBegin(args) {
        if (args.requestType === 'save') {
            chatGrid.dataSource.shift();// Remove the newly added record from first position
            chatGrid.dataSource.push(args.data)// Push the newly added record in data source
            chatGrid.refresh(); // refresh the Grid.
            $("#ChatMessageBar").children()[0].innerHTML = "";
        }


    }

    function SendMessageOutboundFeeedbackPublic()
    {
        var messagesDto= {
            "ProjectId":@ProjectId,
            "SenderName": $("#sName").val(),
            "MessageContent": $("#ChatMessageBar").children()[0].innerHTML
        }
        //console.log(messagesDto);
        if($("#sName").val() && $("#ChatMessageBar").children()[0].innerHTML)
        {
            $.ajax({
                type: 'POST',
                url: '/OutboundDetails/AddNewPublicMessage',
                data: JSON.stringify(messagesDto),
                contentType: "application/json; charset=utf-8",
                dataType: "json",

                success: function (response) {
                    //console.log(response);

                    chatGrid.addRecord(response);
                    chatGrid.refresh(); // refresh the Grid.
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
            });
        }
    }

</script>