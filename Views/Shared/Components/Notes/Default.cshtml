@{ var Notes = ViewData["Notes"] as List<UserNotes>;
    var ProjectId = ViewData["ProjectId"] as int?; }

<style>

    .e-icons {
        font-family: "e-icons" !important;
    }

    .Note {
        padding: 40px;
        cursor: move;
        z-index: 10;
        position: absolute;
        width: 200px;
        height: 200px;
        background-color: orange;
        overflow: hidden;
    }

    .Icon-FullScreen::before {
        font-family: "e-icons" !important;
        content: '\e342';
        font-size: large;
        cursor: pointer;
    }

    .Icon-Edit::before {
        font-family: "e-icons" !important;
        content: '\e81e';
        font-size: large;
        cursor: pointer;
    }

    .Icon-Delete::before {
        font-family: "e-icons" !important;
        content: '\e84e';
        font-size: large;
        cursor: pointer;
    }

    .NoteEditor {
        position: absolute;
        width: 100%;
        min-height: 100%;
        background: #fff;
        padding: 2%;
    }
</style>
<link rel="stylesheet"
      href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/styles/default.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/highlight.min.js"></script>
<link href="~/css/Shared/quill/quillsnow.css" rel="stylesheet">
<!-- Main Quill library -->
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<div id="NotesOverlay" style="position: absolute; z-index:55; background:#64424221;width:100%;height:100%; display: none;">
    <div class="row">
        <button type="button" id="NewNote" class="btn btn-primary" style="margin-top:2px; width:100%" onclick="AddNewNote(true)">New note</button>
    </div>
    <div class="row" id="NotesHolder">
        @foreach (var note in Notes)
        {
<div id="Note_@note.Id" style="Background-Color:@note.NoteBackground; Color:@note.NoteForeground; top:@note.TopPos; left:@note.LeftPos;" onclick="DragEnableNote('Note_@note.Id', @note.Id)" class="Note">
    <div class="row">
        <div class="col-md-8">
            <span>@note.DateOfMessage.Value.ToShortDateString()</span>
        </div>
        <div class="col-md-4">
            <span class="Icon-FullScreen" onclick="OpenFullScreen('@note.TopPos', '@note.LeftPos', 'Note_@note.Id')">

            </span>
            <span class="Icon-Edit" onclick="ChangeNoteContent(@note.Id,'@note.Content','@note.NoteBackground', '@note.NoteForeground')">

            </span>
            <span class="Icon-Delete" onclick="DeleteNote(@note.Id)">

            </span>
        </div>
    </div>
    <div class="row" style="text-align: justify; word-break: break-all;">
        <div style="overflow: hidden;display: -webkit-box;-webkit-line-clamp: 3;-webkit-box-orient: vertical; padding:2%;">
            @Html.Raw(@note.Content)
        </div>
    </div>
</div>}
    </div>

</div>
<div id="NoteEditor" class="NoteEditor" style="display: none; z-index:22;">
    <div class="row" style="padding:2%;">
        <div class="col-md-4">
            <div id="picker" class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                <h4>Background Color</h4>
                <input id="BackgroundColorPicker" type="color">
            </div>
        </div>
        <div class="col-md-4">
            <div id="picker" class="col-xs-12 col-sm-12 col-lg-6 col-md-6">
                <h4>Font Color</h4>
                <input id="ForegroundColorPicker" type="color">
            </div>
        </div>
        <div class="col-md-4">
            <div id="ExampleNote" style="padding: 2%;" style="width:100%; background-color:orange; color:white;">
                <div class="row">
                    <div class="col-md-8">
                        <span>@DateTime.Now.ToShortDateString()</span>
                    </div>
                    <div class="col-md-4">
                        <span class="Icon-FullScreen">

                        </span>
                    </div>
                </div>
                <div class="row" style="text-align: justify; word-break: break-all;">
                    <p id="ExampleNoteText" style="overflow: hidden;display: -webkit-box;-webkit-line-clamp: 7;-webkit-box-orient: vertical; padding:5%;">
                        Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.
                    </p>
                </div>
            </div>
        </div>
    </div>
    <Div class="row">
        <div class="position-relative form-group" style="width:100%;"><label for="NoteEditorText" class="">Repo Steps</label><div name="NoteEditorText" id="NoteEditorText" class="form-control"></div></div>
    </Div>
    <div class="row" style="display: inline-flex;width:100%;">
        <button type="button" id="SaveNote" class="btn btn-primary" style="margin-top:2px; width:100%" onclick="AcceptChanges()">Save Note</button>
        <button type="button" id="CancelNote" class="btn btn-primary" style="margin-top:2px; width:100%" onclick="CancelChanges()">Cancel</button>
    </div>
</div>


<script>
    ej.base.enableRipple(true);
    var selectedNote;
    var NoteId;
    var lastTop;
    var latLeft;
    var isOpen = false;
    var lastNote;
    var CurrentContent;
    var CurrentColor;
    var CurrentFontColor;
    var CurrentId;
    var IsNew = false;
    var BackgroundColorPicker = new ej.inputs.ColorPicker({
        mode: 'Picker',
        modeSwitcher: false,
        inline: true,
        showButtons: false,
        change: BackgroundChange
    });
    BackgroundColorPicker.appendTo('#BackgroundColorPicker');

    var ForegroundColorPicker = new ej.inputs.ColorPicker({
        mode: 'Picker',
        modeSwitcher: false,
        inline: true,
        showButtons: false,
        change: ForegroundChange
    });
    ForegroundColorPicker.appendTo('#ForegroundColorPicker');



    var NoteEditorText = new Quill('#NoteEditorText', {
            theme: 'snow'
    });


    NoteEditorText.on('text-change', function(delta, oldDelta, source) {
        $("#ExampleNoteText").html( $("#NoteEditorText").children()[0].innerHTML);
    });
    var BackgroundColor = "#fff";
    var FontColor = "#fff";
    var notesSatus = false;
    var SaveNote = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    SaveNote.appendTo('#SaveNote');
    var CancelNote = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    CancelNote.appendTo('#CancelNote');
    var NotesBtn = new ej.buttons.Button({ cssClass: 'e-outline', isPrimary: true });
    NotesBtn.appendTo('#NotesBtn');
    var NewNote = new ej.buttons.Button({  isPrimary: true });
    NewNote.appendTo('#NewNote');


    function ShowNotes()
    {
        if(notesSatus === false)
        {
            $("#NotesOverlay").show();
            notesSatus = true;
        }
        else
        {
            $("#NotesOverlay").hide();
            notesSatus = false;
        }
    }


function ChangeNoteContent(id, content, background, fontColor)
{
    CurrentContent = content;
    CurrentColor = background;
    CurrentFontColor = fontColor;
    CurrentId = id;
    AddNewNote(false);
}

function AddNewNote(condition)
{
    IsNew = condition;
    $("#NoteEditor").show();
    $("#NotesOverlay").hide();
    if(condition === false)
    {
        $("#NoteEditorText").children()[0].innerHTML = CurrentContent;
    }

}
function DragEnableNote(id, noteId)
{
    NoteId = noteId;
    selectedNote = document.getElementById(id);
    dragElement(selectedNote);

}


function dragElement(elmnt) {
  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
  if (document.getElementById(elmnt.id)) {
    // if present, the header is where you move the DIV from:
    document.getElementById(elmnt.id).onmousedown = dragMouseDown;
  } else {
    // otherwise, move the DIV from anywhere inside the DIV:
    elmnt.onmousedown = dragMouseDown;
  }

  function dragMouseDown(e) {
    e = e || window.event;
    e.preventDefault();
    // get the mouse cursor position at startup:
    pos3 = e.clientX;
    pos4 = e.clientY;
    document.onmouseup = closeDragElement;
    // call a function whenever the cursor moves:
    document.onmousemove = elementDrag;
  }

  function elementDrag(e) {
    e = e || window.event;
    e.preventDefault();
    // calculate the new cursor position:
    pos1 = pos3 - e.clientX;
    pos2 = pos4 - e.clientY;
    pos3 = e.clientX;
    pos4 = e.clientY;
    // set the element's new position:
    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
  }

  function closeDragElement(e) {
    //console.log(selectedNote.style.top);
    //console.log(selectedNote.style.left);

    var dto = {
            "NoteId" :NoteId,
            "Top" :selectedNote.style.top,
            "Left": selectedNote.style.left
        }
    $.ajax({
    type: 'POST',
        url: '/Notification/ChangeNotePosition',
        data: JSON.stringify(dto),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {

        },
        error: function (xhr, status, error) {
            console.log(error);
        }
    });
    ////console.log(selectedNote.css("left"));

    // stop moving when mouse button is released:
    document.onmouseup = null;
    document.onmousemove = null;
  }
}

function BackgroundChange(args) {
    BackgroundColor = args.currentValue.rgba;
    //console.log(args.currentValue.rgba);
    $('#ExampleNote').css('background-color', args.currentValue.rgba);
}
function ForegroundChange(args) {
    FontColor = args.currentValue.rgba;
    $('#ExampleNote').css('color', args.currentValue.rgba);
}

function AcceptChanges()
{
    if(IsNew == true)
        InsertNewNote();
    else
        EditNote();
}
function EditNote()
{
    var dto = {
        "Content" : $("#NoteEditorText").children()[0].innerHTML,
        "Background": BackgroundColor,
        "FontColor": FontColor,
        "NoteId" : CurrentId
    }
    $.ajax({
    type: 'POST',
        url: '/Notification/EditNote',
        data: JSON.stringify(dto),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
            location.reload();
        },
        error: function (xhr, status, error) {
            console.log(error);
        }
    });
}
function InsertNewNote()
{
       var dto = {
            "ProjectId" : @ProjectId,
            "Content" : $("#NoteEditorText").children()[0].innerHTML,
            "Background": BackgroundColor,
            "FontColor": FontColor,

        }
        $.ajax({
        type: 'POST',
            url: '/Notification/AddNewNote',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                location.reload();
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
}


function DeleteNote(id)
{
    ShowLoader();
    var dto = {
        "NoteId":id
    }
    $.ajax({
    type: 'POST',
        url: '/Notification/DeleteNote',
        data: JSON.stringify(dto),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (response) {
            location.reload();
        },
        error: function (xhr, status, error) {
            console.log(error);
        }
    });
}
function OpenFullScreen(top,left,id)
{
    //console.log("in");
    if(isOpen == false)
    {
        lastNote = document.getElementById(id);
        lastTop = top;
        lastLeft = left;
        lastNote.style.left = 0;
        lastNote.style.top = 0;
        lastNote.style.width = '100%';
        lastNote.style.height = '100%';
        isOpen = true;
    }
    else
    {
        //console.log("out");
        lastNote.style.width = '200px';
        lastNote.style.height = '200px';
        lastNote.style.top = lastTop;
        lastNote.style.left = lastLeft;

        isOpen = false;
    }
}
function CancelChanges()
{
    $("#NoteEditor").hide();
    $("#NotesOverlay").show();
}
</script>