
@{
    var ProjectId = ViewData["ProjectId"] as int?;
    var Username =  ViewData["Username"] as string;
    var ActiveRoom = ViewData["GetDefaultActiveRoom"] as int?;
    var ProjectChatRights = ViewData["ProjectChatRights"] as List<ChatRoomRights>;
    var UserRights = ViewData["GetChatRights"]as UserRights;
}


<style>
    .SideBarRow{
        text-align: center;
        width: 100%;
        padding: 2%;
        margin: 0;
    }
    .InlineFlex {
        display: inline-flex;
        width: 100%;
        margin: 0;
    }
    #NoteEditorText{
        min-height:33vh;
    }
</style>`

<!-- sidebar element declaration -->
<aside id="sidebar-chatview" style="overflow-x:hidden;">
    <div class="main-menu" style="position: relative;">
        <div class="table-content" style="padding:0;height: 86vh;max-height: 86vh;">
            @if(@UserRights.ChatChannelsRule == 1)
            {
                <div class="row">
                    <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 100%;" onclick="OpenNewCategoryModal()" id="OpenNewCategoryModal">Add new Category</button>
                </div>
            }
            <div class="row SideBarRow" style="text-align: center;">
                @await Component.InvokeAsync("SelectProject", @ProjectId)
            </div>
            <div class="row SideBarRow" id="ChatNavigationHolder">
                @await Component.InvokeAsync("ChatNavigation", @ProjectId)
            </div>

        </div>
        <div class="row  UserDetailsPanel" style="padding: 0;margin: 0;">
            <div class="col-md-12" style="padding:0px;">
                <!-- Basic Card Layout  -->
                <div tabindex="0" class="e-card " id="basic_card" style="height: 68px; bottom: 0px;position: fixed;width: 100%;margin: 0px;padding: 0px;">
                    <div class="e-card-content">
                        <div class="col-md-6">
                            <p style="cursor: pointer;">
                                @Username
                            </p>
                        </div>
                        
                        <div class="col-md-2">
                            <span class="Microphone"></span>
                        </div>
                        <div class="col-md-2">
                            <span class="HeadPhones"></span>
                        </div>
                        @if(@UserRights.ChatChannelsRule == 1)
                        {
                            <div class="col-md-2">
                                <span class="SettingsIcon" onclick="OpenProjectChatSettingsPage(@ProjectId)"></span>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>

    </div>
</aside>

<div class="main-content-chat" id="main-chatwindow" style="min-height: 92.142vh; top: -20px;">
    <div class="sidebar-content">
        @*@await Component.InvokeAsync("Notes", @ProjectId)*@

        <div class="row" id="MainChatContent">
            @await Component.InvokeAsync("ChatWIndow", new IncomingIdRequest{
                ProjectId = @ProjectId.Value,
                Id = @ActiveRoom.Value
            })
        </div>
    </div>
</div>
<div id="ChatAddNewCategoryModal">
    <div class="row">
            <input id="InputNewChatCategory" />
    </div>
    <div class="row InlineFlex">
        <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="SaveNewChatCategory()">Submit</button>
        <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="CloseNewCategoryModal()">Cancel</button>
    </div>

</div>



<div id="ChatAddNewRoomModal">
    <div class="row">
            <input id="InputNewChatRoom" />
    </div>
    <div class="row InlineFlex">
        <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="SaveNewChatRoom()">Submit</button>
        <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;" onclick="CloseNewChatRoomModal()">Cancel</button>
    </div>

</div>

<div id="ChatAssignUserRights">
    <div class="row" style="padding: 15px;">
        @foreach (var right in ProjectChatRights)
        {
            <span class="ChipTag" onclick="AssignUserTag(@right.Id)">@right.RightName </span>
        }
    </div>
    <div class="row InlineFlex">
        <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 100%;" onclick="CloseChatAssignRights()">Close</button>
     </div>

</div>



<script>

var ActiveUser=
{
    "Name" : "@Username",
    "ActiveRoom" : @ActiveRoom,
    "ProjectId" : @ProjectId,
};
var ActiveQueryUser;
var SelectedCategoryId;
var InputNewChatRoom = new ej.inputs.TextBox({
    placeholder: 'Channel name',
    floatLabelType: 'Auto'
});
InputNewChatRoom.appendTo('#InputNewChatRoom');
var InputNewChatCategory = new ej.inputs.TextBox({
    placeholder: 'Category Name',
    floatLabelType: 'Auto'
});
InputNewChatCategory.appendTo('#InputNewChatCategory');
var sidebarChat = new ej.navigations.Sidebar({
    width: '290px',
    target: '.main-content-chat',
    mediaQuery: '(min-width: 600px)',
});
sidebarChat.appendTo('#sidebar-chatview');
//end of Sidebar initialization
var ChatAddNewCategoryModal;


ChatAddNewCategoryModal = new ej.popups.Dialog({
    width: '600px',
    header: 'Name your new category',
    isModal: true,
    animationSettings: { effect: 'None' },
    visible: false,

 
});
ChatAddNewCategoryModal.appendTo('#ChatAddNewCategoryModal');

ChatAddNewCategoryModal.hide();


var ChatAddNewRoomModal;


ChatAddNewRoomModal = new ej.popups.Dialog({
    width: '600px',
    header: 'Name your new room',
    isModal: true,
    animationSettings: { effect: 'None' },
    visible: false,
 
});
ChatAddNewRoomModal.appendTo('#ChatAddNewRoomModal');

ChatAddNewRoomModal.hide();



var ChatAssignUserRights;


ChatAssignUserRights = new ej.popups.Dialog({
    width: '600px',
    header: 'Assign User Right',
    isModal: true,
    animationSettings: { effect: 'None' },
    visible: false,
 
});
ChatAssignUserRights.appendTo('#ChatAssignUserRights');

ChatAssignUserRights.hide();

// Dialog will be closed, while clicking on overlay
function onChange(args) {
    if(args.checked) {
        ChatAddNewCategoryModal.overlayClick = function () {
            ChatAddNewCategoryModal.hide();
        };
        ChatAddNewCategoryModal.overlayClick = function () {
            ChatAddNewCategoryModal.hide();
        };
    }
    else {
        ChatAddNewRoomModal.overlayClick = function () {
            ChatAddNewRoomModal.show();
        };
        ChatAddNewRoomModal.overlayClick = function () {
            ChatAddNewRoomModal.show();
        };
    }
}

function OpenNewCategoryModal(){
    ChatAddNewCategoryModal.show();
}
function CloseNewCategoryModal()
{
    ChatAddNewCategoryModal.hide();

}


function AddNewChannelModal(id)
{
    //console.log(id);
    SelectedCategoryId = id;
    ChatAddNewRoomModal.show();
}
 

function CloseNewChatRoomModal()
{
        ChatAddNewRoomModal.hide();
}


function OpenChatAssignRights(id){
    ChatAssignUserRights.show();
    ActiveQueryUser =id;
}
function CloseChatAssignRights()
{
    ChatAssignUserRights.hide();

}


function SaveNewChatCategory()
{
    var messagesDto = {
        "Id": @ProjectId,
        "Phase" : $("#InputNewChatCategory").val()
    }
    //console.log(messagesDto);
    //console.log($("#InputNewChatCategory").val());
    if($("#InputNewChatCategory").val())
    {

        $.ajax({
                type: 'POST',
                url: '/Chat/AddNewCategory',
                data: JSON.stringify(messagesDto),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                
                success: function (response) {
                    InitializeChatItems(response);
                    ChatAddNewCategoryModal.hide();

                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
        });
    }
    else
        ShowAlert("Input field Category Name must contain a value!!!");

}


function SaveNewChatRoom()
{
    var messagesDto = {
        "Id": SelectedCategoryId,
        "Phase" : $("#InputNewChatRoom").val(),
        "WorkItemType": @ProjectId
    }
    if($("#InputNewChatRoom").val())
    {

        $.ajax({
                type: 'POST',
                url: '/Chat/AddNewChatRoom',
                data: JSON.stringify(messagesDto),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                
                success: function (response) {
                    InitializeChatItems(response);
                    ChatAddNewRoomModal.hide();
                },
                error: function (xhr, status, error) {
                    console.log(error);
                }
        });
    }
    else
        ShowAlert("Input field Channel Name must contain a value!!!");
}
function AssignUserTag(Id)
{
     var messagesDto = {
         "ProjectId": @ProjectId,
         "Id": Id,
         "UserId": ActiveQueryUser,
         "__RequestVerificationToken" :gettoken()
    }

    $.ajax({
            type: 'POST',
            url: '/Chat/AssignUserTag',
            data: JSON.stringify(messagesDto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            
            success: function (response) {
                CloseChatAssignRights();
                $("#ActiveTags").append("<span class=\"ChipTag\">"+response.rightName+"<span onclick=\"DeletingTag("+response.id+")\" class=\"ChipCloseBtn\" ></span></span>");
 
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
    });
    var dto = {
        "Id": @ProjectId,
        "__RequestVerificationToken" :gettoken()

     }

    $.ajax({
            type: 'POST',
            url: '/Chat/GetChatChannelsNavigation',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            
            success: function (response) {
               InitializeChatItems(response);
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
    });
    
}
function SetRoomNewMessage(id)
{
    $( "#ChatChannel_"+id ).addClass("NewMessage");
}

function OpenProjectChatSettingsPage(id)
{
    $("#ChatElement").html("");
    $("#ChatElement").load("/Chat/GetChatSettings?id="+id);
}
</script>

