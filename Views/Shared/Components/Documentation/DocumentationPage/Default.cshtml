@{ var PagesData = ViewData["PageData"] as List<AssociatedDocumentationCategoryPage>;
    var Category = ViewData["CategoryId"] as int?;
    var ProjectId = ViewData["ProjectId"] as int?;
    var UserRights = ViewData["UserRights"] as UserRights; }
<style>
    #DocumentationPageControl img {
        width: 100%;
    }

    #DocumentationPageControl .row {
        padding: 20px;
    }

    .DocumentationMaxHeight {
        max-height: 83vh;
        overflow-y: auto;
    }

        .DocumentationMaxHeight html {
            scroll-behavior: smooth;
        }

    .SideLinkHolder {
        padding-left: 20px;
        padding-right: 20px;
        padding-top: 3px;
        padding-bottom: 3px;
        border-bottom: #e3165b 2px solid;
    }

    .SideLink {
        font-size: 18px;
        color: #797979;
    }

        .SideLink:hover {
            cursor: pointer;
            color: #e3165b;
        }

    .DocumentationBody {
        text-align: justify;
    }
</style>
<div class="row" id="activeDocumentationPage">
    <div class="col-md-9 DocumentationMaxHeight">
        @if (PagesData != null)
        {
@foreach (var currentPage in PagesData)
{
<div class="DocumentationSection" id="Current_@currentPage.Id">
    @if (UserRights.Documentation == 1)
    {
<div class="row" style="display:flex;">
    <hr />
    <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%; margin:1%;" onclick="OpenEditPageModal(@currentPage.Id)">Edit page</button>
    <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 50%;margin:1%;" onclick="DeletePage(@currentPage.Id)">Delete page</button>
    <hr />
</div>              }
    <div class="DocumentationBody">
        @Html.Raw(await @GetDocumentationPageContent(currentPage.Content))
    </div>
</div>}}
        @if (UserRights.Documentation == 1)
        {
<div class="row">
    <hr />
    <button class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 100%;" onclick="OpenNewPageModal(0)">Add new page</button>
    <hr />
</div>}
    </div>
    <div class="col-md-3 DocumentationMaxHeight">
        @if (PagesData != null)
        {
@foreach (var quickLink in PagesData)
{
<div class="row SideLinkHolder">
    <a href="#Current_@quickLink.Id" class="SideLink"> @quickLink.Title</a>
</div>}}
    </div>
</div>
<div id="NewPageModalHodler">

</div>

@{ async Task<string> GetDocumentationPageContent(string data)
    {
        var getTableMarkdowns = GetStrBetweenTags(data, "#opentable", "#closetable");
        if (string.IsNullOrEmpty(getTableMarkdowns))
        {
            return data;
        }
        getTableMarkdowns = getTableMarkdowns.Replace("</p>", "");
        getTableMarkdowns = getTableMarkdowns.Replace("<p>", "");

        var result = await Task.Run(() => Component.InvokeAsync("TableBuilder", getTableMarkdowns));

        var currentResult = ReplaceMarkdown(data, "#opentable", "#closetable");
        var bindingResult = string.Empty;
        if (currentResult.Item1 == null && currentResult.Item2 == null)
        {
            return GetString(result);
        }
        else
        {
            bindingResult += currentResult.Item1;
            bindingResult += GetString(result);
            bindingResult += currentResult.Item2;
            //System.Console.WriteLine(result.Result);
        }
        return bindingResult;
    }
    string GetStrBetweenTags(string value, string startTag, string endTag)
    {
        if (value.Contains(startTag) && value.Contains(endTag))
        {
            int index = value.IndexOf(startTag) + startTag.Length;
            return value.Substring(index, value.IndexOf(endTag) - index);
        }

        return null;
    }
    (string, string) ReplaceMarkdown(string value, string startTag, string endTag)
    {
        if (value.Contains(startTag) && value.Contains(endTag))
        {
            int index = value.IndexOf(startTag);
            var endIndex = value.IndexOf(endTag);
            var markdown = string.Empty;
            if (endIndex >= value.Length)
                markdown = value.Substring(index, value.Length - 1);
            else
                markdown = value.Substring(index, value.IndexOf(endTag) + endTag.Length - index);

            value = value.Replace(markdown, "____");
            var result = value.Split("____");
            if (result == null)
            {
                return (null, null);
            }
            return (result[0], result[1]);
        }

        return (null, null);
    }
    string GetString(Microsoft.AspNetCore.Html.IHtmlContent content)
    {
        using (var writer = new System.IO.StringWriter())
        {
            content.WriteTo(writer, System.Text.Encodings.Web.HtmlEncoder.Default);
            return writer.ToString();
        }
    } }
<link rel="stylesheet"
      href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/styles/default.min.css">
<script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.1.0/highlight.min.js"></script>
<link href="~/css/Shared/quill/quillsnow.css" rel="stylesheet">
<!-- Main Quill library -->
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>

<script>
    function OpenNewPageModal()
    {
        $("#activeDocumentationPage").hide();
        $("#activeDocumentationPageHeader").hide();


         
        $("#NewPageModalHodler").html("");
        $("#NewPageModalHodler").load("/Documentation/GetPageModal?id=0&&category=@Category&&projectId=@ProjectId")
            .ajaxSuccess(x => {
             
            //console.log("Success")
        });

    }

    function OpenEditPageModal(id)
    {
        $("#activeDocumentationPage").hide();
        $("#activeDocumentationPageHeader").hide();

        //console.log(id);
        $("#NewPageModalHodler").html("");
        $("#NewPageModalHodler").load("/Documentation/GetPageModal?id="+id+"&&category=@Category&&projectId=@ProjectId")
        .ajaxSuccess(x => {
            //console.log("Success")
        });

    }
    function DeletePage(id)
    {
        $("#DocumentationPageControl").html("");

        var data = {
            "Id": id

        }
        $.ajax({
            type: 'POST',
            url: '/Documentation/DeletePage',
            data: JSON.stringify(data),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                $("#DocumentationPageControl").load('/Documentation/DocumentationPage?id='+@Category+'&&projectId=@ProjectId');

            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });

    }

</script>