@{
    var Queries = ViewData["UserQueries"] as List<UserQueries>;
    var CountWItems = ViewData["CountWItems"] as List<OutgoingBindingCollection>;
    var BurndownOn = ViewData["BurndownOn"] as List<OutgoingBindingCollection>;
    var SumWItems = ViewData["SumWItems"] as List<OutgoingBindingCollection>;
    var Backlogs = ViewData["Backlog"]  as List<OutgoingBindingCollection>;
    var GroupBy = ViewData["GroupBy"] as List<OutgoingBindingCollection>;
    var ProjectId = ViewData["ProjectId"] as int?;
    var ViewComponentId = ViewData["ViewComponentId"] as int?;
    var Dashboard = ViewData["Dashboard"] as int?;
 }

<style>
    #dialogIterations{
        height:98vh;
    }

    .controlContainer .row{
        padding-top:4%;
        padding-bottom: 4%;
    }
</style>

<div class="controlContainer">
    <div class="row">
        <input type="text" id='ChartTitle' />
    </div>
     <div class="row">
        <h4>Saved Queries</h2>
    </div>
    <div class="row">
             <select class="form-control-sm form-control" id="Queries">
                @foreach(var query in @Queries)
                {
                    <option value="@query.Id">@query.QueryName</option>
                }
            </select>
        </div>
    </div>
    <div class="row">
        <h4>Group by</h2>
    </div>
     <div class="row">
             <select class="form-control-sm form-control" id="GroupRule">
                @foreach(var group in @GroupBy)
                {
                    <option value="@group.Id">@group.Name</option>
                }
            </select>
        </div>
    </div>
  
    <div class="row">
        <div class="col-md-3">
            <select class="form-control-sm form-control" id="BurndownOn">
                @foreach(var burndownOn in @BurndownOn)
                {
                    <option value="@burndownOn.Id">@burndownOn.Name</option>
                }
            </select>
        </div>
        <div class="col-md-2" style="text-align: center;font-family: "Roboto", "Segoe UI", "GeezaPro", "DejaVu Serif", "sans-serif", "-apple-system", "BlinkMacSystemFont";font-weight: bolder;">
          <h5>Of</h5>
        </div>
        <div class="col-md-7">
            <div id="CountWorkItems">
                <select class="form-control-sm form-control" id="CountWItems">
                    @foreach(var countWItems in @CountWItems)
                    {
                        <option value="@countWItems.Id">@countWItems.Name</option>
                    }
                </select>
            </div>
           <div id="SumWorkItems">
                <select class="form-control-sm form-control" id="SumWItems">
                    @foreach(var sumWItem in @SumWItems)
                    {
                        <option value="@sumWItem.Id">@sumWItem.Name</option>
                    }
                </select>
           </div>
        </div>
    </div>
    <div class="row">
        <button   class="btn btn-primary e-control e-btn e-lib e-outline e-primary" style="width: 100%;"  onclick="SaveBurndownChartSettings()" >Add Widget</button>
    </div>
<script>
    var QuerySelected;
    var BurndownOnSelect = 1; 
    var GroupRuleSelected = 1;
    var WorkItemTypeSelected = 0;
    var CountWItemSelected = 0;
    var SumWItemSelected = 0;
    $("#SumWorkItems").hide();
    var ChartTitle = new ej.inputs.TextBox({
        placeholder: 'Pie Chart',
        floatLabelType: 'Auto',
        enableRtl: true
    });
    ChartTitle.appendTo('#ChartTitle');
  
    var Queries = new ej.dropdowns.DropDownList({

        // set the placeholder to DropDownList input element
        placeholder: 'Select Query',
        change: QueriesChanged,
        // set the height of the popup element
        popupHeight: '200px',
        index: 0,
        
    });
    Queries.appendTo('#Queries');

    var GroupRule = new ej.dropdowns.DropDownList({

        // set the placeholder to DropDownList input element
        placeholder: 'Select Group Rule',
        change: GroupRuleChanged,
        // set the height of the popup element
        popupHeight: '200px',
        index: 0,
        
    });
    GroupRule.appendTo('#GroupRule');
   
    
    var BurndownOn = new ej.dropdowns.DropDownList({

        // set the placeholder to DropDownList input element
        placeholder: 'Burndown',
        // set the height of the popup element
        popupHeight: '200px',
        change: BurndownOnChanged,
        index: 0,
        
    });
    BurndownOn.appendTo('#BurndownOn');

    var CountWItems = new ej.dropdowns.DropDownList({

        // set the placeholder to DropDownList input element
        placeholder: 'Work Item Types',
        // set the height of the popup element
        popupHeight: '200px',
        change: CountWItemChanged,

        index: 0,
        
    });
    CountWItems.appendTo('#CountWItems');


    var SumWItems = new ej.dropdowns.DropDownList({

        // set the placeholder to DropDownList input element
        placeholder: 'Work Item Types',
        // set the height of the popup element
        popupHeight: '200px',
        enabled: false,
        change: SumWItemChanged,

        index: 0,
        
    });
    SumWItems.appendTo('#SumWItems');

    function BurndownOnChanged(args)
    {
        //console.log(args);
        if(args.value === "1")
        {
            CountWItems.enabled = true;
            SumWItems.enabled = false;
            $("#CountWorkItems").show();
            $("#SumWorkItems").hide();
            BurndownOnSelect = 1; 


        }
        else
        {
            CountWItems.enabled = false;
            SumWItems.enabled = true;
            $("#CountWorkItems").hide();
            $("#SumWorkItems").show();
            BurndownOnSelect = 2;

        }
    }
    function QueriesChangedChanged(args)
    {
        //console.log(args);
        QuerySelected = parseInt(args.value);
    }
    function WorkItemTypeChanged(args)
    {
        WorkItemTypeSelected = parseInt(args.value);
    }
    function CountWItemChanged(args)
    {
        CountWItemSelected = parseInt(args.value);
    }

    function SumWItemChanged(args)
    {
        //console.log(args);
        SumWItemSelected = parseInt(args.value);
    }
    function QueriesChanged(args)
    {
        QuerySelected = parseInt(args.value);
    }
    function GroupRuleChanged(args)
    {
        GroupRuleSelected = parseInt(args.value);
    }

    function SaveBurndownChartSettings()
    {
        var dto = {
            "Title" : $("#ChartTitle").val(),
            "ProjectId": @ProjectId,
            "Dashboard" : @Dashboard,
            "ViewComponentId": @ViewComponentId,
            "QueryId" : QuerySelected,
            "CountWItemSelected" : CountWItemSelected,
            "SumWItemSelected" : SumWItemSelected,
            "BurndownOnSelect" : BurndownOnSelect
        }
        //console.log(dto);
        $.ajax({
            type: 'POST',
            url: '/Widget/AppendBurndownChart',
            data: JSON.stringify(dto),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                //console.log(response);
                AddNewDashboardPanel(response.associatedUserDashboardPremade[0].id, response.id);
            },
            error: function (xhr, status, error) {
                console.log(error);
            }
        });
    }
</script>